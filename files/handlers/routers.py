from aiogram import types, F, Router
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext

from files.keyboards.inline_keyboards import *
import files.database.requests as rq
from resources.config import CHANNELS, NOT_SUB_MESSAGE, ADMIN_IDS
from files.defs import check_sub, GetMessage, send_to_get, SendMessage, re_nick_anonim, send_to_get_answer, Mailing, \
    send_message_to_id

main_router = Router()


@main_router.message(GetMessage.message_text)
async def send_message(message: types.Message, state: FSMContext):
    await state.update_data(message_text=message.text)
    data = await state.get_data()
    await message.answer(text='<b>–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚úÖ</b>', parse_mode='HTML')
    await send_to_get(ref_id=data["ref"], message_text=data["message_text"], sender_id=data["sender_id"])
    await state.clear()


@main_router.message(SendMessage.message_text)
async def send_message(message: types.Message, state: FSMContext):
    await state.update_data(message_text=message.text)
    data = await state.get_data()
    await send_to_get_answer(ref_id=data["ref"], message_text=data["message_text"], sender_id=data["sender_id"])
    await message.answer(text='<b>–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚úÖ</b>', parse_mode='HTML')
    await state.clear()


@main_router.message(CommandStart())
async def start_bot(message: types.Message, state: FSMContext):
    if await check_sub(CHANNELS, message.from_user.id):
        await rq.set_user(message.from_user.id, message.from_user.username)

        if len(message.text) > 6:
            ref = message.text[7:]
        else:
            ref = ''

        if len(ref) > 0:
            if int(ref) == message.from_user.id:
                await message.answer(
                    '‚ùå <b>–ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å–∞–º–æ–º—É —Å–µ–±–µ! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –≤ –∫–∞–Ω–∞–ª –∏–ª–∏ —á–∞—Ç! </b> ‚ùå',
                    parse_mode='HTML')
            else:
                await state.set_state(GetMessage.ref)
                await state.update_data(ref=ref)
                await state.set_state(GetMessage.sender_id)
                await state.update_data(sender_id=message.from_user.id)
                await state.set_state(GetMessage.message_text)
                await message.answer('‚úçÔ∏è <b>–ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–µ–ª–∏ –∑–∞–¥–∞—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü—É —ç—Ç–æ–π —Å—Å—ã–ª–∫–∏:</b>',
                                     parse_mode='HTML')
        else:
            await message.answer_photo(
                photo='AgACAgIAAxkBAAMOZwwYPMiEemup8ly-YkpUxmTiVzQAAmXqMRuBllBI7IT3seTkEKYBAAMCAAN4AAM2BA', caption=f'''
<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, @{message.from_user.username}!
–≠—Ç–æ –±–æ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ‚úâÔ∏è</b>

–ù–∞–ø—Ä–∏–º–µ—Ä, –≤—ã –ø—É–±–ª–∏–∫—É–µ—Ç–µ —Å–≤–æ—é —Å—Å—ã–ª–∫—É –≤ –ª–∏—á–Ω–æ–º –∫–∞–Ω–∞–ª–µ, –¥–∞–ª–µ–µ –≤–∞—à–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥—è—Ç –ø–æ –Ω–µ–π –∏ –∑–∞–¥–∞—é—Ç –≤–∞–º –≤–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–¥—É—Ç –≤ —ç—Ç–æ–≥–æ –±–æ—Ç–∞. 

–ü–æ—Ç–æ–º –º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞–∂–∞–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É ‚ú®

–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É 
<b>"üîó –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É"</b> –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã üëá
''', reply_markup=start_kb, parse_mode='HTML')
    else:
        await message.answer(text=f'''
<b>{NOT_SUB_MESSAGE}</b>
''', parse_mode='HTML', reply_markup=await sub_channels_kb())


@main_router.callback_query(F.data == 'get_link')
async def get_link(callback: types.CallbackQuery):
    if await check_sub(CHANNELS, callback.message.from_user.id):
        await callback.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ "üîó –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É"')
        await callback.message.answer(f'''
<b>‚úâÔ∏è –í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:</b>
    
https://t.me/anonimous_questions_bot?start={callback.from_user.id}
    
–ù–∞–∂–º–∏—Ç–µ –Ω–∏–∂–µ 
<b>"üîó –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π"</b>, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –≤ —á–∞—Ç –∏–ª–∏ –≤ –∫–∞–Ω–∞–ª üî•
    ''', parse_mode='HTML', reply_markup=await share_link_kb(callback.from_user.id))
    else:
        await callback.message.answer(text=f'''
<b>{NOT_SUB_MESSAGE}</b>
''', parse_mode='HTML', reply_markup=await sub_channels_kb())


@main_router.callback_query(F.data == 'check_sub')
async def check_sub_channels(callback: types.CallbackQuery):
    if await check_sub(CHANNELS, callback.from_user.id):
        await callback.message.answer(text='''
<b>–í—Å—ë –æ—Ç–ª–∏—á–Ω–æ, –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã! ‚úÖ</b>

–¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ üîÑ
''', parse_mode='HTML')
    else:
        await callback.message.answer(text=f'''
<b>{NOT_SUB_MESSAGE}</b>
''', parse_mode='HTML', reply_markup=await sub_channels_kb())


@main_router.callback_query(F.data == 'answer_message')
async def answer_message(callback: types.CallbackQuery, state: FSMContext):
    if await check_sub(CHANNELS, callback.message.from_user.id):
        await state.set_state(SendMessage.ref)
        await state.update_data(ref=await re_nick_anonim(callback.message.text[44:54]))
        await state.set_state(SendMessage.sender_id)
        await state.update_data(sender_id=callback.from_user.id)
        await state.set_state(SendMessage.message_text)
        await callback.message.answer(text='<b>‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –∑–∞–¥–∞–ª–∏:</b>', parse_mode='HTML')
    else:
        await callback.message.answer(text=f'''
<b>{NOT_SUB_MESSAGE}</b>
''', parse_mode='HTML', reply_markup=await sub_channels_kb())


@main_router.callback_query(F.data == 'write_message')
async def write_message(callback: types.CallbackQuery, state: FSMContext):
    if await check_sub(CHANNELS, callback.message.from_user.id):
        await state.set_state(GetMessage.ref)
        await state.update_data(ref=await re_nick_anonim(callback.message.text[52:62]))
        await state.set_state(GetMessage.sender_id)
        await state.update_data(sender_id=callback.from_user.id)
        await state.set_state(GetMessage.message_text)
        await callback.message.answer(text='‚úçÔ∏è <b>–ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–µ–ª–∏ –∑–∞–¥–∞—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü—É —ç—Ç–æ–π —Å—Å—ã–ª–∫–∏:</b>',
                                      parse_mode='HTML')
    else:
        await callback.message.answer(text=f'''
    <b>{NOT_SUB_MESSAGE}</b>''', parse_mode='HTML', reply_markup=await sub_channels_kb())


@main_router.message(Command('my_link'))
async def my_link(message: types.Message):
    if await check_sub(CHANNELS, message.from_user.id):
        await message.answer(f'''
<b>–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ‚úâÔ∏è:</b>

https://t.me/anonimous_questions_bot?start={message.from_user.id}

–ù–∞–∂–º–∏—Ç–µ –Ω–∏–∂–µ 
<b>"üîó –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π"</b>, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –≤ —á–∞—Ç –∏–ª–∏ –≤ –∫–∞–Ω–∞–ª üî•
''', parse_mode='HTML', reply_markup=await share_link_kb(message.from_user.id))
    else:
        await message.answer(text=f'''
<b>{NOT_SUB_MESSAGE}</b>
''', parse_mode='HTML', reply_markup=await sub_channels_kb())


@main_router.message(Command('links'))
async def links(message: types.Message):
    if await check_sub(CHANNELS, message.from_user.id):
        await message.answer(text='''
<b>–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª –∏ —Å–∞–π—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ ‚ú®</b>
''', parse_mode='HTML', reply_markup=links_kb)
    else:
        await message.answer(text=f'''
<b>{NOT_SUB_MESSAGE}</b>
''', parse_mode='HTML', reply_markup=await sub_channels_kb())


@main_router.message(Command('admin'))
async def admin(message: types.Message):
    if await check_sub(CHANNELS, message.from_user.id):
        if str(message.from_user.id) in ADMIN_IDS:
            await message.answer(text='<b>üç∫ –ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å üç∫</b>', reply_markup=admin_kb, parse_mode='HTML')
        else:
            pass

    else:
        await message.answer(text=f'''
<b>{NOT_SUB_MESSAGE}</b>
''', parse_mode='HTML', reply_markup=await sub_channels_kb())


@main_router.callback_query(F.data == 'mailing')
async def mailing_message_text(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(Mailing.message_text)
    await callback.message.answer(text='<b>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å —Ç–µ–≥–∞–º–∏ —è–∑—ã–∫–∞ —Ä–∞–∑–º–µ—Ç–∫–∏ HTML:</b>',
                                  parse_mode='HTML')


@main_router.message(Mailing.message_text)
async def mailing_photo(message: types.Message, state: FSMContext):
    await state.update_data(message_text=message.text)
    await state.set_state(Mailing.photo)
    await message.answer(text='<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø–æ—Å—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:</b>', parse_mode='HTML')


@main_router.message(Mailing.photo)
async def mailing_button_text(message: types.Message, state: FSMContext):
    await state.update_data(photo=message.photo[-1].file_id)
    await state.set_state(Mailing.button_text)
    await message.answer(text='<b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:</b>',
                         parse_mode='HTML')


@main_router.message(Mailing.button_text)
async def mailing_button_url(message: types.Message, state: FSMContext):
    await state.update_data(button_text=message.text)
    await state.set_state(Mailing.button_url)
    await message.answer(text='<b>–í–≤–µ–¥–∏—Ç–µ URL inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:</b>',
                         parse_mode='HTML')


@main_router.message(Mailing.button_url)
async def mailing_pre_send(message: types.Message, state: FSMContext):
    await state.update_data(button_url=message.text)
    data = await state.get_data()
    await message.answer_photo(photo=data["photo"], caption=data["message_text"], parse_mode='HTML',
                               reply_markup=await create_buttons(data["button_text"], data["button_url"]))
    await state.set_state(Mailing.check)
    await message.answer(
        text='<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–æ—Å—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏, –∏ –µ—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ - –≤–≤–µ–¥–∏—Ç–µ "1" –±–µ–∑ –∫–∞–≤—ã—á–µ–∫, –ø–æ—Å–ª–µ —á–µ–≥–æ –≤–∞—à –ø–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞</b>',
        parse_mode='HTML')


@main_router.message(Mailing.check)
async def mailing_send(message: types.Message, state: FSMContext):
    await state.update_data(check=message.text)
    data = await state.get_data()
    if data["check"] == '1':
        ids = await rq.all_ids()
        for id in ids:
            await send_message_to_id(id, data["message_text"], data["photo"], data["button_text"], data["button_url"])
    await message.answer('<b>–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞ ‚úÖ</b>', parse_mode='HTML')
    await state.clear()


@main_router.callback_query(F.data == 'statistics')
async def statistics(callback: types.CallbackQuery):
    count = await rq.count_ids()
    await callback.message.answer(text=f'''
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:</b>
‚ûñ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {count} 

–¶–∏—Ñ—Ä–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—Ä–æ—Å–µ, —Ç. –µ. —ç—Ç–æ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç ‚úÖ

<b>@anonimous_questions_bot</b> üí¨
''', parse_mode='HTML')



